[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import {render, screen} from \"@testing-library/react\";\r\n\r\nconst RoleExemple = () => {\r\n  return <div>\r\n    <a href=\"/\">Link</a>\r\n    <button>Button</button>\r\n    <footer>Contentinfo</footer>\r\n    <h1>Heading</h1>\r\n    <header>Nanner</header>\r\n    <img alt=\"description\" /> Img\r\n    <input type=\"checkbox\" /> Checkbox\r\n    <input type=\"number\" /> Spin button\r\n    <input type=\"radio\" /> Radio\r\n    <input type=\"text\" /> Textbox\r\n    <li>Listitem</li>\r\n    <ul>Listgroup</ul>\r\n  </div>\r\n}\r\n\r\nrender(<RoleExemple />)","type":"code","id":"zbhpj"},{"content":"**Herer we get element by his respective roles**","type":"text","id":"sx8qb"},{"content":"test(\"can find elements by role\", () => {\r\n  render(<RoleExemple />)\r\n  const roles = [\r\n    'link',\r\n    'button',\r\n    'contentinfo',\r\n    'heading',\r\n    'banner',\r\n    'img',\r\n    'checkbox',\r\n    'radio',\r\n    'textbox',\r\n    'listitem',\r\n    'list'\r\n  ];\r\n\r\n  for(let role of roles){\r\n    const elt = screen.getByRole(role);\r\n    expect(elt).toBeInTheDocument();\r\n  }\r\n})","type":"code","id":"ata00"},{"content":"**Here we will get element with the same rule**","type":"text","id":"iutk7"},{"content":"function AccessibleName(){\r\n  return (\r\n    <div>\r\n      <button>Submit</button>\r\n      <button>Cancel</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<AccessibleName />)","type":"code","id":"jef0c"},{"content":"test(\"can select by accessible name\", () => {\r\n  render(<AccessibleName />);\r\n\r\n  const submitButton = screen.getByRole('button', {name: /submit/i});\r\n  const cancelButton = screen.getByRole('button', {name: /cancel/i});\r\n\r\n  expect(submitButton).toBeInTheDocument();\r\n  expect(cancelButton).toBeInTheDocument();\r\n})","type":"code","id":"6yiv8"},{"content":"**Using accessible name to get input**","type":"text","id":"3g9ea"},{"content":"function MoreNames(){\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"email\">Email</label>\r\n      <input id=\"email\"/>\r\n\r\n      <label htmlFor=\"search\">Search</label>\r\n      <input id=\"search\"/>\r\n\r\n      <input\r\n        aria-label=\"Has Error\"\r\n        aria-invalid=\"true\"\r\n        aria-errormessage=\"error-message\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<MoreNames />)","type":"code","id":"mr6y4"},{"content":"test(\"make sure two inputs rendered\", () => {\r\n  render(<MoreNames />);\r\n\r\n  const emailInput = screen.getByRole('textbox', {\r\n    name: \"Email\"\r\n  });\r\n  const searchInput = screen.getByRole('textbox', {\r\n    name: \"Search\"\r\n  });\r\n  const withoutLabel = screen.getByRole('textbox', {\r\n    name: /has error/i\r\n  });\r\n\r\n  expect(emailInput).toBeInTheDocument();\r\n  expect(searchInput).toBeInTheDocument();\r\n  expect(withoutLabel).toBeInTheDocument();\r\n})","type":"code","id":"gvdul"},{"content":"","type":"text","id":"i5svl"},{"content":"function IconButtons(){\r\n  return (<div>\r\n    <button aria-label=\"sign in\">\r\n      <svg />\r\n    </button>\r\n\r\n    <button aria-label=\"sign out\">\r\n      <svg />\r\n    </button>\r\n  </div>)\r\n}\r\n\r\nrender(<IconButtons />)","type":"code","id":"fhyyc"},{"content":"test(\"find elements based on label\", () => {\r\n  render(<IconButtons />)\r\n  const signInButton = screen.getByRole('button', {\r\n    name: /sign in/i\r\n  });\r\n  const signOutButton = screen.getByRole('button', {\r\n    name: /sign out/i\r\n  });\r\n\r\n  expect(signInButton).toBeInTheDocument();\r\n  expect(signOutButton).toBeInTheDocument();\r\n})","type":"code","id":"qe4lh"}]